{"version":3,"sources":["./node_modules/@aws-amplify/ui-components/dist/esm/amplify-s3-album.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+D;AACS;AACT;AACpC;AACoC;AACQ;AACxB;AACyD;;AAExG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,4BAA4B,EAAE,UAAU,EAAE,eAAe,EAAE,gBAAgB,EAAE,UAAU,GAAG;;AAE1F;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,eAAe,SAAS;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA,ygBAAygB;AACzgB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,sDAAsD;;AAEtD;AACA,kCAAkC;;AAElC;AACA;;AAEA,mBAAmB,QAAQ;AAC3B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,iCAAiC,uCAAuC,iBAAiB,8BAA8B,sBAAsB,eAAe,cAAc,eAAe,UAAU,oBAAoB,aAAa,mBAAmB,eAAe,mBAAmB,oBAAoB,WAAW,kBAAkB,mBAAmB,eAAe,oBAAoB,YAAY,YAAY,oBAAoB,aAAa,qBAAqB,uBAAuB,iBAAiB,cAAc,eAAe,kBAAkB,oBAAoB,iBAAiB,aAAa,aAAa,WAAW,aAAa,kBAAkB,MAAM,OAAO,yCAAyC,8BAA8B,cAAc;;AAEhvB,mBAAmB,wDAAM;AACzB;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA,qBAAqB,4DAAW;AAChC;AACA;AACA;AACA,0BAA0B,2DAAY;AACtC;AACA;AACA;AACA,mBAAmB,sCAAsC;AACzD;AACA,iBAAiB,4DAAO,WAAW,4DAAO;AAC1C,gCAAgC,wDAAuB;AACvD;AACA;AACA,mCAAmC,4DAAO;AAC1C;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8DAAa;AACjC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C,aAAa;AACb;AACA;AACA;AACA,mBAAmB,qCAAqC;AACxD,+BAA+B,sEAAO;AACtC;AACA,sBAAsB,sEAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,IAAI,GAAG,KAAK;AAClD;AACA;AACA,sFAAsF,MAAM,OAAO,MAAM;AACzG;AACA;AACA;AACA;AACA;AACA,eAAe,+EAAqB;AACpC;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,cAAc,4DAAC,SAAS,2BAA2B,EAAE,4DAAC,SAAS,oBAAoB;AACpG,oBAAoB,4DAAC,SAAS,iCAAiC,SAAS,GAAG,EAAE,4DAAC,sBAAsB,uMAAuM,GAAG,4DAAC,UAAU,uBAAuB;AAChV,SAAS,qBAAqB,4DAAC,oBAAoB,aAAa,sDAAI,sFAAsF;AAC1J;AACA;AACA;;AAE8C","file":"20.js","sourcesContent":["import { r as registerInstance, h } from './index-3fb5c139.js';\nimport { Logger, filenameToContentType, I18n } from '@aws-amplify/core';\nimport { A as AccessLevel } from './storage-types-f257c0f2.js';\nimport '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport { e as NO_STORAGE_MODULE_FOUND } from './constants-d1abe7de.js';\nimport { Storage } from '@aws-amplify/storage';\nimport { i as imageFileType, c as calcKey, p as putStorageObject } from './storage-helpers-48c373a0.js';\n\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}\n\nconst REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nconst amplifyS3AlbumCss = \":host{--overlay-bg-color:rgba(0, 0, 0, 0.15)}.album-container{-webkit-box-sizing:border-box;box-sizing:border-box;max-width:100%;margin:0 auto;padding:0 2rem}.grid-row{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin:-1rem -1rem;padding-bottom:3rem}.grid-item{position:relative;-ms-flex:1 0 22rem;flex:1 0 22rem;-ms-flex-positive:1;flex-grow:1;margin:1rem;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center}amplify-s3-image{--width:22rem;--height:20rem;border-radius:5px;-o-object-fit:cover;object-fit:cover}.img-overlay{display:none;width:100%;height:21rem;position:absolute;top:0;left:0;background-color:var(--overlay-bg-color)}.grid-item:hover .img-overlay{display:block}\";\n\nconst logger = new Logger('S3Album');\nconst AmplifyS3Album = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** The content type header used when uploading to S3 */\n        this.contentType = 'binary/octet-stream';\n        /** The access level of the files */\n        this.level = AccessLevel.Public;\n        /** Boolean to enable or disable picker */\n        this.picker = true;\n        /** Picker button text */\n        this.pickerText = Translations.PICKER_TEXT;\n        this.albumItems = [];\n        this.imgArr = {};\n        this.list = async () => {\n            const { path = '', level, track, identityId } = this;\n            logger.debug('Album path: ' + path);\n            if (!Storage || typeof Storage.list !== 'function') {\n                throw new Error(NO_STORAGE_MODULE_FOUND);\n            }\n            try {\n                const data = await Storage.list(path, {\n                    level,\n                    track,\n                    identityId,\n                });\n                this.marshal(data);\n            }\n            catch (error) {\n                logger.warn(error);\n            }\n        };\n        this.marshal = (list) => {\n            list.forEach((item) => {\n                const name = item.key.toLowerCase();\n                const ext = name.split('.')[1];\n                if (imageFileType.has(ext)) {\n                    if (!item.contentType || (item.contentType && item.contentType === 'binary/octet-stream')) {\n                        item.contentType = this.getContentType(item);\n                    }\n                }\n            });\n            const filtered = list.filter((item) => item.contentType && item.contentType.startsWith('image/'));\n            let items = this.filter ? this.filter(filtered) : filtered;\n            items = this.sort ? this.sort(items) : items;\n            this.albumItems = items;\n            logger.debug('album items', this.albumItems);\n            this.constructImgArray(this.albumItems);\n        };\n        this.constructImgArray = (list) => {\n            list.map(item => {\n                this.imgArr[`${item['key']}`] = item['key'];\n            });\n        };\n        this.handlePick = async (event) => {\n            const file = event.target.files[0];\n            const { path = '', level, track, fileToKey } = this;\n            const key = path + calcKey(file, fileToKey);\n            try {\n                await putStorageObject(key, file, level, track, file['type'], logger);\n            }\n            catch (error) {\n                logger.error(error);\n                throw new Error(error);\n            }\n            if (Object.keys(this.imgArr).includes(key)) {\n                this.albumItems = [...this.albumItems];\n                this.imgArr[key] = `${key}-${v4()}`;\n            }\n            else {\n                const filtered = [...this.albumItems, ...(this.filter ? this.filter([{ key }]) : [{ key }])];\n                this.albumItems = this.sort ? this.sort(filtered) : filtered;\n            }\n        };\n    }\n    getContentType(item) {\n        return filenameToContentType(item.key, 'image/*');\n    }\n    componentWillLoad() {\n        this.list();\n    }\n    render() {\n        return (h(\"div\", null, h(\"div\", { class: \"album-container\" }, h(\"div\", { class: \"grid-row\" }, this.albumItems.map(item => {\n            return (h(\"div\", { class: \"grid-item\", key: `key-${item.key}` }, h(\"amplify-s3-image\", { key: this.imgArr[item.key], imgKey: item.key, level: this.level, path: this.path, identityId: this.identityId, track: this.track, handleOnError: this.handleOnError, handleOnLoad: this.handleOnLoad }), h(\"span\", { class: \"img-overlay\" })));\n        }))), this.picker && (h(\"amplify-picker\", { pickerText: I18n.get(this.pickerText), inputHandler: e => this.handlePick(e), acceptValue: \"image/*\" }))));\n    }\n};\nAmplifyS3Album.style = amplifyS3AlbumCss;\n\nexport { AmplifyS3Album as amplify_s3_album };\n"],"sourceRoot":"webpack:///"}