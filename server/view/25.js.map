{"version":3,"sources":["./node_modules/@aws-amplify/ui-components/dist/esm/amplify-select-mfa-type.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+D;AACd;AACS;AACjB;AACsB;AACwF;;AAEvJ,mBAAmB,wDAAM;AACzB;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC;AACA,sBAAsB,yDAAS;AAC/B;AACA;AACA,sBAAsB,yDAAS;AAC/B;AACA;AACA,sBAAsB,yDAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,6DAA6D;AACtG;AACA,6BAA6B,yDAAS;AACtC;AACA;AACA,6BAA6B,yDAAS;AACtC;AACA;AACA,6BAA6B,yDAAS;AACtC;AACA;AACA,aAAa,sDAAI,WAAW,sDAAI;AAChC,4BAA4B,wDAAoB;AAChD;AACA;AACA;AACA,2CAA2C,sDAAI;AAC/C;AACA,oCAAoC,sDAAI,KAAK,2DAAY,mBAAmB,GAAG,eAAe;AAC9F;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,4BAA4B,wDAAiC,gBAAgB,wDAAoC;AACjH;AACA,qCAAqC,sDAAI,KAAK,2DAAY;AAC1D;AACA;AACA;AACA;AACA,qCAAqC,sDAAI,KAAK,2DAAY;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sDAAI,KAAK,2DAAY;AAC9C,oBAAoB,4DAAC,cAAc,4DAAC,YAAY,sDAAI,KAAK,2DAAY;AACrE;AACA,eAAe,sBAAsB;AACrC;AACA;AACA,QAAQ,4DAAC,0BAA0B,mBAAmB,sDAAI,KAAK,2DAAY,kDAAkD,sDAAI,KAAK,2DAAY,uGAAuG,SAAS,4DAAC,0BAA0B,2HAA2H,mBAAmB,4DAAC,0BAA0B,8HAA8H,uBAAuB,4DAAC,0BAA0B,kIAAkI;AACxvB;AACA;AACA,gBAAgB,4DAAC,sDAAsD,4DAAC,wBAAwB,sBAAsB;AACtH;AACA;;AAE2D","file":"25.js","sourcesContent":["import { r as registerInstance, h } from './index-3fb5c139.js';\nimport { Logger, I18n } from '@aws-amplify/core';\nimport { M as MfaOption } from './auth-types-78df304e.js';\nimport { Auth } from '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport { N as NO_AUTH_MODULE_FOUND, f as USER_NOT_SETUP_SOFTWARE_TOKEN_MFA, g as USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA } from './constants-d1abe7de.js';\n\nconst logger = new Logger('SelectMFAType');\nconst AmplifySelectMFAType = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Fires when Verify is clicked */\n        this.handleSubmit = event => this.verify(event);\n        this.TOTPSetup = false;\n        this.selectMessage = null;\n        this.MFAMethod = null;\n        this.isTOTP = false;\n        this.isNoMFA = false;\n        this.isSMS = false;\n        this.loading = false;\n    }\n    handleRadioButtonChange(event) {\n        this.TOTPSetup = false;\n        this.selectMessage = null;\n        // Reseting state values to default\n        this.isNoMFA = false;\n        this.isTOTP = false;\n        this.isSMS = false;\n        const { value, type, checked } = event.target;\n        const checkType = ['radio', 'checkbox'].includes(type);\n        if (value === MfaOption.SMS && checkType) {\n            this.isSMS = checked;\n        }\n        if (value === MfaOption.TOTP && checkType) {\n            this.isTOTP = checked;\n        }\n        if (value === MfaOption.NOMFA && checkType) {\n            this.isNoMFA = checked;\n        }\n    }\n    async verify(event) {\n        // avoid submitting the form\n        if (event) {\n            event.preventDefault();\n        }\n        logger.debug('MFA Type Values', { TOTP: this.isTOTP, SMS: this.isSMS, 'No MFA': this.isNoMFA });\n        if (this.isTOTP) {\n            this.MFAMethod = MfaOption.TOTP;\n        }\n        else if (this.isSMS) {\n            this.MFAMethod = MfaOption.SMS;\n        }\n        else if (this.isNoMFA) {\n            this.MFAMethod = MfaOption.NOMFA;\n        }\n        const user = this.authData;\n        if (!Auth || typeof Auth.setPreferredMFA !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            const preferredMFAData = await Auth.setPreferredMFA(user, this.MFAMethod);\n            logger.debug('Set Preferred MFA Succeeded', preferredMFAData);\n            this.selectMessage = `${I18n.get(Translations.SUCCESS_MFA_TYPE)} ${this.MFAMethod}`;\n            // \tTODO Add Toast = showToast: true,\n        }\n        catch (error) {\n            const { message } = error;\n            if (message === USER_NOT_SETUP_SOFTWARE_TOKEN_MFA || message === USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA) {\n                this.TOTPSetup = true;\n                this.selectMessage = I18n.get(Translations.SETUP_TOTP_REQUIRED);\n                // \tTODO Add Toast = showToast: true,\n            }\n            else {\n                logger.debug('Set Preferred MFA failed', error);\n                this.selectMessage = I18n.get(Translations.UNABLE_TO_SETUP_MFA_AT_THIS_TIME);\n                // \tTODO Add Toast = showToast: true,\n            }\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    contentBuilder() {\n        if (!this.MFATypes || Object.keys(this.MFATypes).length < 2) {\n            logger.debug(I18n.get(Translations.LESS_THAN_TWO_MFA_VALUES_MESSAGE));\n            return (h(\"div\", null, h(\"a\", null, I18n.get(Translations.LESS_THAN_TWO_MFA_VALUES_MESSAGE))));\n        }\n        const { SMS, TOTP, Optional } = this.MFATypes;\n        return (\n        // TODO: Add Toast messages\n        h(\"amplify-form-section\", { submitButtonText: I18n.get(Translations.SELECT_MFA_TYPE_SUBMIT_BUTTON_TEXT), headerText: I18n.get(Translations.SELECT_MFA_TYPE_HEADER_TEXT), handleSubmit: event => this.handleSubmit(event), loading: this.loading }, SMS ? (h(\"amplify-radio-button\", { key: \"sms\", name: \"MFAType\", value: \"SMS\", label: \"SMS\", handleInputChange: event => this.handleRadioButtonChange(event) })) : null, TOTP ? (h(\"amplify-radio-button\", { key: \"totp\", name: \"MFAType\", value: \"TOTP\", label: \"TOTP\", handleInputChange: event => this.handleRadioButtonChange(event) })) : null, Optional ? (h(\"amplify-radio-button\", { key: \"noMFA\", name: \"MFAType\", value: \"NOMFA\", label: \"No MFA\", handleInputChange: event => this.handleRadioButtonChange(event) })) : null));\n    }\n    render() {\n        return (h(\"div\", null, this.contentBuilder(), this.TOTPSetup ? h(\"amplify-totp-setup\", { user: this.authData }) : null));\n    }\n};\n\nexport { AmplifySelectMFAType as amplify_select_mfa_type };\n"],"sourceRoot":"webpack:///"}