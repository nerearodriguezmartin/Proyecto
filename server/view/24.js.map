{"version":3,"sources":["./node_modules/@aws-amplify/ui-components/dist/esm/amplify-s3-text.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+D;AACd;AACc;AACpC;AACoC;AAC9B;AACH;AAC4D;;AAE1F,gCAAgC,6CAA6C,yCAAyC,mCAAmC,4CAA4C,gBAAgB,wCAAwC,qCAAqC,kBAAkB,mBAAmB,IAAI,cAAc,gBAAgB,eAAe,iBAAiB,iBAAiB,2BAA2B,wBAAwB,qBAAqB,kBAAkB,gBAAgB;;AAEpgB,mBAAmB,wDAAM;AACzB;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA,qBAAqB,4DAAW;AAChC;AACA,4BAA4B,2DAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6DAA6D;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sEAAgB;AAClC;AACA;AACA,6BAA6B,sEAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,cAAc,4DAAC,SAAS,0BAA0B,aAAa,4DAAC,0BAA0B,4DAAC,cAAc,sDAAI;AAC9H;AACA,2BAA2B;AAC3B;AACA;AACA,MAAM;AACN;AACA;;AAE4C","file":"24.js","sourcesContent":["import { r as registerInstance, h } from './index-3fb5c139.js';\nimport { Logger, I18n } from '@aws-amplify/core';\nimport { A as AccessLevel } from './storage-types-f257c0f2.js';\nimport '@aws-amplify/auth';\nimport { T as Translations } from './Translations-c833f663.js';\nimport './constants-d1abe7de.js';\nimport '@aws-amplify/storage';\nimport { p as putStorageObject, a as getTextSource } from './storage-helpers-48c373a0.js';\n\nconst amplifyS3TextCss = \":host{--container-color:var(--amplify-smoke-white);--border-color:var(--amplify-light-grey);--font-size:var(--amplify-text-md);--text-color:var(--amplify-secondary-color)}.text-container{background-color:var(--container-color);border:1px solid var(--border-color);border-radius:5px;margin-bottom:10px}pre{display:block;margin:0.5rem 0;padding:0.5rem;line-height:1rem;max-height:50rem;font-size:var(--font-size);color:var(--text-color);word-break:break-all;overflow-y:scroll;overflow-x:auto}\";\n\nconst logger = new Logger('S3Text');\nconst AmplifyS3Text = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** The content type header used when uploading to S3 */\n        this.contentType = 'text/*';\n        /** The access level of the text file */\n        this.level = AccessLevel.Public;\n        /** Fallback content */\n        this.fallbackText = Translations.TEXT_FALLBACK_CONTENT;\n    }\n    async watchHandler() {\n        await this.load();\n    }\n    async componentWillLoad() {\n        await this.load();\n    }\n    async load() {\n        const { path, textKey, body, contentType, level, track, identityId } = this;\n        if (!textKey && !path) {\n            logger.debug('empty textKey and path');\n            return;\n        }\n        const key = textKey || path;\n        logger.debug('loading ' + key + '...');\n        if (body) {\n            await putStorageObject(textKey, body, level, track, contentType, logger);\n        }\n        try {\n            this.src = await getTextSource(key, level, track, identityId, logger);\n        }\n        catch (err) {\n            logger.debug(err);\n            throw new Error(err);\n        }\n    }\n    render() {\n        return (h(\"div\", null, h(\"div\", { class: \"text-container\" }, this.src ? h(\"pre\", null, this.src) : h(\"pre\", null, I18n.get(this.fallbackText)))));\n    }\n    static get watchers() { return {\n        \"textKey\": [\"watchHandler\"],\n        \"body\": [\"watchHandler\"]\n    }; }\n};\nAmplifyS3Text.style = amplifyS3TextCss;\n\nexport { AmplifyS3Text as amplify_s3_text };\n"],"sourceRoot":"webpack:///"}